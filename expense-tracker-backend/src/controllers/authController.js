import { prisma } from '../prismaClient.js';
import { hashPassword, comparePassword } from '../utils/hash.js';
import { generateToken } from '../utils/token.js';

// üéØ ‡∏™‡∏£‡πâ‡∏≤‡∏á Income Categories ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö user ‡πÉ‡∏´‡∏°‡πà
async function createDefaultIncomeCategoriesForUser(userId) {
  const defaultCategories = [
    'üí∞ ‡πÄ‡∏á‡∏¥‡∏ô‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏´‡∏•‡∏±‡∏Å',
    'üéØ ‡πÇ‡∏ö‡∏ô‡∏±‡∏™', 
    '‚è∞ ‡∏Ñ‡πà‡∏≤‡∏•‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤',
    'üíº ‡∏á‡∏≤‡∏ô‡∏û‡∏≤‡∏£‡πå‡∏ó‡πÑ‡∏ó‡∏°‡πå',
    'üõí ‡∏Ç‡∏≤‡∏¢‡∏Ç‡∏≠‡∏á‡∏≠‡∏≠‡∏ô‡πÑ‡∏•‡∏ô‡πå',
    'üìà ‡πÄ‡∏á‡∏¥‡∏ô‡∏õ‡∏±‡∏ô‡∏ú‡∏•',
    'üè¶ ‡∏î‡∏≠‡∏Å‡πÄ‡∏ö‡∏µ‡πâ‡∏¢',
    'üéÅ ‡πÄ‡∏á‡∏¥‡∏ô‡∏Ç‡∏ß‡∏±‡∏ç',
    'üí∏ ‡∏≠‡∏∑‡πà‡∏ô‡πÜ'
  ];

  // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ default ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö user ‡πÉ‡∏´‡∏°‡πà
  await Promise.all(
    defaultCategories.map(name => 
      prisma.incomeCategory.create({
        data: { name, userId }
      })
    )
  );
}

// üÜï ‡∏™‡∏£‡πâ‡∏≤‡∏á Expense Categories ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥ (global - ‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏û‡∏≠)
async function createDefaultExpenseCategoriesIfNotExist() {
  const defaultCategories = [
    { name: 'üçΩÔ∏è ‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡πÅ‡∏•‡∏∞‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏î‡∏∑‡πà‡∏°', description: '‡∏Ñ‡πà‡∏≤‡∏≠‡∏≤‡∏´‡∏≤‡∏£ ‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏î‡∏∑‡πà‡∏° ‡∏£‡πâ‡∏≤‡∏ô‡∏≠‡∏≤‡∏´‡∏≤‡∏£' },
    { name: 'üöó ‡∏Å‡∏≤‡∏£‡πÄ‡∏î‡∏¥‡∏ô‡∏ó‡∏≤‡∏á', description: '‡∏Ñ‡πà‡∏≤‡∏ô‡πâ‡∏≥‡∏°‡∏±‡∏ô ‡∏Ñ‡πà‡∏≤‡πÇ‡∏î‡∏¢‡∏™‡∏≤‡∏£ ‡πÅ‡∏ó‡πá‡∏Å‡∏ã‡∏µ‡πà ‡∏£‡∏ñ‡πÑ‡∏ü' },
    { name: 'üõçÔ∏è ‡∏ä‡πá‡∏≠‡∏õ‡∏õ‡∏¥‡πâ‡∏á', description: '‡πÄ‡∏™‡∏∑‡πâ‡∏≠‡∏ú‡πâ‡∏≤ ‡∏£‡∏≠‡∏á‡πÄ‡∏ó‡πâ‡∏≤ ‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡πÉ‡∏ä‡πâ‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß' },
    { name: 'üé¨ ‡∏ö‡∏±‡∏ô‡πÄ‡∏ó‡∏¥‡∏á', description: '‡∏´‡∏ô‡∏±‡∏á ‡∏Ñ‡∏≠‡∏ô‡πÄ‡∏™‡∏¥‡∏£‡πå‡∏ï ‡πÄ‡∏Å‡∏° ‡∏á‡∏≤‡∏ô‡∏≠‡∏î‡∏¥‡πÄ‡∏£‡∏Å' },
    { name: 'üè• ‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û', description: '‡πÇ‡∏£‡∏á‡∏û‡∏¢‡∏≤‡∏ö‡∏≤‡∏• ‡∏Ñ‡∏•‡∏¥‡∏ô‡∏¥‡∏Å ‡∏¢‡∏≤ ‡∏ß‡∏¥‡∏ï‡∏≤‡∏°‡∏¥‡∏ô' },
    { name: 'üìö ‡∏Å‡∏≤‡∏£‡∏®‡∏∂‡∏Å‡∏©‡∏≤', description: '‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠ ‡∏Ñ‡∏≠‡∏£‡πå‡∏™‡πÄ‡∏£‡∏µ‡∏¢‡∏ô ‡∏≠‡∏ö‡∏£‡∏° ‡∏™‡∏±‡∏°‡∏°‡∏ô‡∏≤' },
    { name: 'üè† ‡∏ö‡πâ‡∏≤‡∏ô‡πÅ‡∏•‡∏∞‡∏™‡∏ß‡∏ô', description: '‡∏Ñ‡πà‡∏≤‡πÑ‡∏ü ‡∏Ñ‡πà‡∏≤‡∏ô‡πâ‡∏≥ ‡∏≠‡∏¥‡∏ô‡πÄ‡∏ó‡∏≠‡∏£‡πå‡πÄ‡∏ô‡πá‡∏ï ‡∏Ç‡∏≠‡∏á‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏ö‡πâ‡∏≤‡∏ô' },
    { name: 'üí∏ ‡∏≠‡∏∑‡πà‡∏ô‡πÜ', description: '‡∏£‡∏≤‡∏¢‡∏à‡πà‡∏≤‡∏¢‡∏≠‡∏∑‡πà‡∏ô‡πÜ ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏´‡∏°‡∏ß‡∏î‡πÉ‡∏î‡πÜ' }
  ];

  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ categories ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
  const existingCount = await prisma.category.count();
  
  if (existingCount === 0) {
    // ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ categories ‡πÉ‡∏´‡πâ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏´‡∏°‡πà
    await Promise.all(
      defaultCategories.map(category => 
        prisma.category.create({
          data: category
        })
      )
    );
    console.log(`‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á default expense categories ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô ${defaultCategories.length} ‡∏´‡∏°‡∏ß‡∏î`);
  }
}

export const register = async (req, res, next) => {
  try {
    const { firstname, lastname, email, password } = req.body;

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô
    if (!firstname || !lastname || !email || !password) {
      return res.status(400).json({ 
        message: '‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô' 
      });
    }

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏≠‡∏µ‡πÄ‡∏°‡∏•
    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    if (!emailRegex.test(email)) {
      return res.status(400).json({ 
        message: '‚ùå ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á' 
      });
    }

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏Ç‡πá‡∏á‡πÅ‡∏£‡∏á‡∏Ç‡∏≠‡∏á‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô
    if (password.length < 6) {
      return res.status(400).json({ 
        message: '‚ùå ‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 6 ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£' 
      });
    }

    const hashed = await hashPassword(password);
    
    // üöÄ ‡∏™‡∏£‡πâ‡∏≤‡∏á default expense categories ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ (‡∏ï‡πâ‡∏≠‡∏á‡∏ó‡∏≥‡∏Å‡πà‡∏≠‡∏ô‡∏™‡∏£‡πâ‡∏≤‡∏á user)
    await createDefaultExpenseCategoriesIfNotExist();
    
    // ‡∏™‡∏£‡πâ‡∏≤‡∏á user ‡πÉ‡∏´‡∏°‡πà
    const user = await prisma.user.create({
      data: { 
        firstname: firstname.trim(), 
        lastname: lastname.trim(), 
        email: email.toLowerCase().trim(), 
        password: hashed 
      }
    });

    // üöÄ ‡∏™‡∏£‡πâ‡∏≤‡∏á Income Categories ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
    await createDefaultIncomeCategoriesForUser(user.id);

    res.status(201).json({
      message: '‚úÖ ‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à! ‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ‡πÅ‡∏•‡∏∞‡∏£‡∏≤‡∏¢‡∏à‡πà‡∏≤‡∏¢‡πÑ‡∏î‡πâ‡∏ñ‡∏π‡∏Å‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏´‡πâ‡πÅ‡∏•‡πâ‡∏ß',
      user: {
        id: user.id,
        firstname: user.firstname,
        lastname: user.lastname,
        email: user.email
      }
    });

  } catch (err) {
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö unique constraint error (‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏ã‡πâ‡∏≥)
    if (err.code === 'P2002') {
      return res.status(400).json({ 
        message: '‚ùå ‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏ô‡∏µ‡πâ‡∏ñ‡∏π‡∏Å‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏ä‡πâ‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏≠‡∏∑‡πà‡∏ô' 
      });
    }
    
    console.error('Registration error:', err);
    next(err);
  }
};

export const getUserbyId = async (req, res, next) => {
  try {
    // ‡∏î‡∏∂‡∏á user id ‡∏à‡∏≤‡∏Å token ‡∏ó‡∏µ‡πà decode ‡πÅ‡∏•‡πâ‡∏ß‡πÉ‡∏ô middleware
    const userId = req.user.id;
        
    const user = await prisma.user.findUnique({
      where: { id: userId },
      select: {
        id: true,
        firstname: true,
        lastname: true,
        email: true,
        createdAt: true
        // ‡πÑ‡∏°‡πà‡∏™‡πà‡∏á password ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ
      }
    });

    if (!user) {
      return res.status(404).json({ 
        message: '‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ' 
      });
    }

    res.json({
      id: user.id,
      firstname: user.firstname,
      lastname: user.lastname,
      email: user.email,
      createdAt: user.createdAt
    });

  } catch (err) {
    console.error('Get user error:', err);
    next(err);
  }
};

export const login = async (req, res, next) => {
  try {
    const { email, password } = req.body;

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô
    if (!email || !password) {
      return res.status(400).json({ 
        message: '‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡πÅ‡∏•‡∏∞‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô' 
      });
    }

    // ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ user ‡πÅ‡∏•‡∏∞‡∏ô‡∏±‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô categories ‡∏î‡πâ‡∏ß‡∏¢
    const user = await prisma.user.findUnique({ 
      where: { email: email.toLowerCase().trim() },
      include: {
        _count: {
          select: {
            expenses: true,
            incomes: true,
            incomeCategories: true
          }
        }
      }
    });
            
    if (!user) {
      return res.status(401).json({ 
        message: '‚ùå ‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏´‡∏£‡∏∑‡∏≠‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á' 
      });
    }
            
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô
    let isPasswordValid;
    if (user.password.startsWith('$2')) {
      // Password ‡∏ñ‡∏π‡∏Å hash ‡πÅ‡∏•‡πâ‡∏ß ‡πÉ‡∏ä‡πâ bcrypt compare
      isPasswordValid = await comparePassword(password, user.password);
    } else {
      // Password ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ hash ‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á (legacy support)
      isPasswordValid = password === user.password;
      
      // ‡∏ñ‡πâ‡∏≤ password ‡∏ï‡∏£‡∏á‡πÅ‡∏ï‡πà‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ hash ‡πÉ‡∏´‡πâ hash ‡πÉ‡∏´‡∏°‡πà
      if (isPasswordValid) {
        const hashedPassword = await hashPassword(password);
        await prisma.user.update({
          where: { id: user.id },
          data: { password: hashedPassword }
        });
      }
    }
            
    if (!isPasswordValid) {
      return res.status(401).json({ 
        message: '‚ùå ‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏´‡∏£‡∏∑‡∏≠‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á' 
      });
    }

    res.json({
      message: '‚úÖ ‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à',
      token: generateToken(user.id),
      user: {
        id: user.id,
        firstname: user.firstname,
        lastname: user.lastname,
        email: user.email,
        stats: {
          totalExpenses: user._count.expenses,
          totalIncomes: user._count.incomes,
          incomeCategories: user._count.incomeCategories
        }
      }
    });

  } catch (err) {
    console.error('Login error:', err);
    next(err);
  }
};

// üÜï API ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏î‡∏π Categories ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏Ç‡∏≠‡∏á User
export const getUserCategories = async (req, res, next) => {
  try {
    const userId = req.user.id;

    // Expense Categories (global - ‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏ô‡πÉ‡∏ä‡πâ‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô)
    const expenseCategories = await prisma.category.findMany({
      orderBy: { name: 'asc' }
    });

    // Income Categories (user-specific)  
    const incomeCategories = await prisma.incomeCategory.findMany({
      where: { userId },
      orderBy: { name: 'asc' }
    });

    res.json({
      expenseCategories,
      incomeCategories,
      message: `üìä ‡∏û‡∏ö‡∏´‡∏°‡∏ß‡∏î‡∏£‡∏≤‡∏¢‡∏à‡πà‡∏≤‡∏¢ ${expenseCategories.length} ‡∏´‡∏°‡∏ß‡∏î ‡πÅ‡∏•‡∏∞‡∏´‡∏°‡∏ß‡∏î‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ ${incomeCategories.length} ‡∏´‡∏°‡∏ß‡∏î`
    });

  } catch (err) {
    console.error('Get categories error:', err);
    next(err);
  }
};